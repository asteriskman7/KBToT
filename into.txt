Kristen Bell's Triangle of Transcendence

1 
1 2 
2 3 5 
5 7 0 5 
5 0 7 7 2 
2 7 7 4 1 3 
3 5 2 9 3 4 7 
7 0 5 7 6 9 3 0 
0 7 7 2 9 5 4 7 7 
7 7 4 1 3 2 7 1 8 5

         X 
        X . 
       . X X 
      X X . X 
     X . X X . 
    . X X . X X 
   X X . X X . X 
  X . X X . X X . 
 . X X . X X . X X 
X X . X X . X X . X

X 
X.
.XX
XX.X
X.XX.
.XX.XX
XX.XX.X
X.XX.XX.
.XX.XX.XX
XX.XX.XX.X

squares are numbered like their value in bell triangle
the number is the number of values to find randomly
speed can be increase by luck
luck is gained by completing a square faster than 50% prediction
squares can be re-run to improve luck but gained luck can't decrease
may need to limit how many can be run at one time, running like 400 squares
  at the same time may be too much for a single frame
need some equivalent to <snail approved>
make it freaking cute
have to account for offline time and catch up when returning since we can't
  predict when a square will complete. doing work in webworkers helps if 
  the browser is loaded but not if the browser is entirely closed.
probably only have about 12 rows since that row ends with 4213597 and
  the prediction is that it takes about 66.7M tries which is 772 days at 1
  try per second. however, with speedup that might come way down. the next
  row ends with 27644437 which should take 489.6M tries which is 15 years
Can we store a sufficient amount of info in the localstorage? 5MiB
  an array of size n storing single digits takes about 2n localstorage so
  we could only store 2.5e6 array. if we convert it into a string it takes
  only n bytes and we could go to probably n/7 if we compress the bits into
  ascii characters. this would get to max of about 35e6. When we save/load
  we don't need to store what values have been found, just how many are
  left to find!
maybe luck comes from the luck of the cells that feed into the current cell?
  how would this work for k=1 cells?

